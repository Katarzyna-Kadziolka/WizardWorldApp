@using WizardWorldApp.Data.Elixirs
@using WizardWorldApp.Services
@inject WizardWorldClient _client

<MudContainer class="table_width">
   <MudTable Items="@_elixirs" Dense="false" Hover="true" Bordered="false" Striped="true" 
             Filter="new Func<Elixir, bool>(FilterFunc)" @bind-SelectedItem="_selectedItem">
       <ToolBarContent>
           <MudText Typo="Typo.h6">Elixirs</MudText>
           <MudSpacer/>
           <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Clearable="true"
                         AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
       </ToolBarContent>
       <HeaderContent>
           <MudTh>Name</MudTh>
           <MudTh>Effect</MudTh>
           <MudTh>Side Effects</MudTh>
           <MudTh>Characteristics</MudTh>
           <MudTh>Time</MudTh>
           <MudTh>Difficulty</MudTh>
           <MudTh>Manufacturer</MudTh>
       </HeaderContent>
       <RowTemplate>
           <MudTd DataLabel="Name">@context.Name</MudTd>
           <MudTd DataLabel="Effect">@context.Effect</MudTd>
           <MudTd DataLabel="SideEffects">@context.SideEffects</MudTd>
           <MudTd DataLabel="Characteristics">@context.Characteristics</MudTd>
           <MudTd DataLabel="Time">@context.Time</MudTd>
           <MudTd DataLabel="Difficulty">@context.Difficulty.ToString()</MudTd>
           <MudTd DataLabel="Manufacturer">@context.Manufacturer</MudTd>
       </RowTemplate>
       <PagerContent>
           <MudTablePager/>
       </PagerContent>
   </MudTable> 
</MudContainer>


@code {
    private string _searchString = "";
    private Elixir _selectedItem = null;
    
    private IEnumerable<Elixir> _elixirs = new List<Elixir>();

    protected override async Task OnInitializedAsync() {
        _elixirs = await _client.GetElixirsAsync();
    }

    private bool FilterFunc(Elixir elixir) => FilterFunc(elixir, _searchString);

    private bool FilterFunc(Elixir elixir, string searchString) {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (elixir.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (elixir.Effect != null && elixir.Effect.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (elixir.Difficulty.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (elixir.Time != null && elixir.Time.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (elixir.Manufacturer != null && elixir.Manufacturer.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}