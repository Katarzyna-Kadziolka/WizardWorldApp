@using WizardWorldApp.Data
@using WizardWorldApp.Data.Houses
@using WizardWorldApp.Services
@inject WizardWorldClient _client

<MudTable Items="@_houses" Dense="false" Hover="true" Bordered="false" Striped="true" 
          Filter="new Func<House, bool>(FilterFunc)" @bind-SelectedItem="_selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Houses</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" 
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Common Room</MudTh>
        <MudTh>House Colours</MudTh>
        <MudTh>Animal</MudTh>
        <MudTh>Element</MudTh>
        <MudTh>Founder</MudTh>
        <MudTh>Ghost</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Common Room">@context.CommonRoom</MudTd>
        <MudTd DataLabel="House Colours">@context.HouseColours</MudTd>
        <MudTd DataLabel="Animal">@context.Animal</MudTd>
        <MudTd DataLabel="Element">@context.Element</MudTd>
        <MudTd DataLabel="Founder">@context.Founder</MudTd>
        <MudTd DataLabel="Ghost">@context.Ghost</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    private string _searchString = "";
    private House _selectedItem = null;
    private string _traits = "";

    private IEnumerable<House> _houses = new List<House>();

    protected override async Task OnInitializedAsync() {
        // _houses = await _client.GetHousesAsync();
        _houses = new List<House>() {
            new House {
                Id = Guid.NewGuid(),
                Name = "Griffindor",
                CommonRoom = "The tower",
                HouseColours = "Red, gold",
                Animal = "Lion",
                Element = "Sword",
                Founder = "Godryk Gryffindor",
                Ghost = "Prawie Bezgłowy Nick",
                Heads = new List<HouseHead>(),
                Traits = new List<Trait> {
                    new Trait {
                        Id = Guid.NewGuid(),
                        Name = TraitName.None
                    }
                }
            },
            new House {
                Id = Guid.NewGuid(),
                Name = "Ravenclaw",
                CommonRoom = "The highest tower",
                HouseColours = "Blue, silver",
                Animal = "Raven",
                Element = "Goblet",
                Founder = "Rowena Ravenclaw",
                Ghost = "Szara Dama",
                Heads = new List<HouseHead>(),
                Traits = new List<Trait> {
                    new Trait {
                        Id = Guid.NewGuid(),
                        Name = TraitName.None
                    }
                }
            },
            new House {
                Id = Guid.NewGuid(),
                Name = "Slytherin",
                CommonRoom = "The castle dungeons",
                HouseColours = "Green, silver",
                Animal = "Snake",
                Element = "Dagger",
                Founder = "Salazar Slytherin",
                Ghost = "Krwawy Baron",
                Heads = new List<HouseHead>(),
                Traits = new List<Trait> {
                    new Trait {
                        Id = Guid.NewGuid(),
                        Name = TraitName.None
                    }
                },
            },
        };
    }

    private bool FilterFunc(House spell) => FilterFunc(spell, _searchString);

    private bool FilterFunc(House house, string searchString) {
        var traitsNames = house.Traits.Select(a => a.Name).ToList();
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (house.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (house.CommonRoom.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (house.HouseColours.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (house.Ghost.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (house.Animal.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (house.Founder.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (house.Element.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}