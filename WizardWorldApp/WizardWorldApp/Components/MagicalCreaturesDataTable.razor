@using WizardWorldApp.Data
@using WizardWorldApp.Data.MagicalCreatures
@using WizardWorldApp.Services
@inject WizardWorldClient _client

<MudTable Items="@_creatures" Dense="false" Hover="true" Bordered="false" Striped="true" 
          Filter="new Func<MagicalCreature, bool>(FilterFunc)" @bind-SelectedItem="_selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Magical Creature</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" 
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Classification</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Danger Level</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Native To</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Classification">@context.Classification.ToString()</MudTd>
        <MudTd DataLabel="Status">@context.Status.ToString()</MudTd>
        <MudTd DataLabel="DangerLevel">@context.DangerLevel.ToString()</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="NativeTo">@context.NativeTo</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    private string _searchString = "";
    private MagicalCreature _selectedItem = null;

    private IEnumerable<MagicalCreature> _creatures = new List<MagicalCreature>();

    protected override async Task OnInitializedAsync() {
        // _creatures = await _client.GetMagicalCreaturesAsync();
        _creatures = new List<MagicalCreature>() {
            new MagicalCreature {
                Id = Guid.NewGuid(),
                Name = "Hypogryph",
                Classification = CreatureClassificationByMinistryOfMagic.None,
                Status = CreatureStatus.None,
                DangerLevel = CreatureDangerLevel.None,
                Description = "Half bird half hourse",
                NativeTo = "Great Britain",
                CreatureRelations = new List<string>()
            },
            new MagicalCreature {
                Id = Guid.NewGuid(),
                Name = "Phenix",
                Classification = CreatureClassificationByMinistryOfMagic.None,
                Status = CreatureStatus.None,
                DangerLevel = CreatureDangerLevel.None,
                Description = "Immortal bird",
                NativeTo = "Egypt",
                CreatureRelations = new List<string>()
            },
            new MagicalCreature {
                Id = Guid.NewGuid(),
                Name = "Kikimora",
                Classification = CreatureClassificationByMinistryOfMagic.None,
                Status = CreatureStatus.None,
                DangerLevel = CreatureDangerLevel.None,
                Description = "Insect",
                NativeTo = "Redania",
                CreatureRelations = new List<string>()
            },
        };
    }

    private bool FilterFunc(MagicalCreature creature) => FilterFunc(creature, _searchString);

    private bool FilterFunc(MagicalCreature creature, string searchString) {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (creature.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (creature.Classification.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (creature.Status.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (creature.DangerLevel.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (creature.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (creature.NativeTo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}