@using WizardWorldApp.Data
@inject HttpClient httpClient

<MudTable Items="@spells" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" 
          Filter="new Func<Spell, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Spells</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" 
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Incantation</MudTh>
        <MudTh>Effect</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Light</MudTh>
        <MudTh>Creator</MudTh>
        <MudTh>Can be verbal</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Incantation">@context.Incantation</MudTd>
        <MudTd DataLabel="Effect">@context.Effect</MudTd>
        <MudTd DataLabel="Type">@context.Type</MudTd>
        <MudTd DataLabel="Light">@context.Light</MudTd>
        <MudTd DataLabel="Creator">@context.Creator</MudTd>
        <MudTd DataLabel="Can be verbal">@context.CanBeVerbal</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;
    private string searchString1 = "";
    private string searchString2 = "";
    private Spell selectedItem1 = null;
    private Spell selectedItem2 = null;

    private HashSet<Spell> selectedItems = new HashSet<Spell>();

    private IEnumerable<Spell> spells = new List<Spell>();

    protected override async Task OnInitializedAsync() {
    //Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
        spells = new List<Spell>() {
            new Spell {
                Id = Guid.NewGuid(),
                Name = "Murder Spell",
                Type = SpellType.Curse,
                Creator = "",
                Effect = "Death",
                Incantation = "Avada Kedavra",
                Light = SpellLight.Green,
                CanBeVerbal = true
            },
            new Spell {
                Id = Guid.NewGuid(),
                Name = "Torture Spell",
                Type = SpellType.Curse,
                Creator = "Anonim",
                Effect = "Torture",
                Incantation = "Crucio",
                Light = SpellLight.Red,
                CanBeVerbal = true
            },
            new Spell {
                Id = Guid.NewGuid(),
                Name = "Full Control Spell",
                Type = SpellType.DarkCharm,
                Creator = "",
                Effect = "Full Control",
                Incantation = "Imperius",
                Light = SpellLight.Transparent,
                CanBeVerbal = true
            }
        };
    }

    private bool FilterFunc1(Spell spell) => FilterFunc(spell, searchString1);
    private bool FilterFunc2(Spell spell) => FilterFunc(spell, searchString2);

    private bool FilterFunc(Spell spell, string searchString) {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (spell.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (spell.Incantation.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (spell.Type.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}