@using WizardWorldApp.Data
@using WizardWorldApp.Data.Spells
@using WizardWorldApp.Services
@inject WizardWorldClient _client

<MudContainer class="table_width">
   <MudTable Items="@_spells" Dense="@_dense" Hover="@_hover" Bordered="@_bordered" Striped="@_striped" 
             Filter="new Func<Spell, bool>(FilterFunc1)" @bind-SelectedItem="_selectedItem1">
       <ToolBarContent>
           <MudText Typo="Typo.h6">Spells</MudText>
           <MudSpacer/>
           <MudTextField @bind-Value="_searchString1" Placeholder="Search" Adornment="Adornment.Start" 
                         AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
       </ToolBarContent>
       <HeaderContent>
           <MudTh>Name</MudTh>
           <MudTh>Incantation</MudTh>
           <MudTh>Effect</MudTh>
           <MudTh>Type</MudTh>
           <MudTh>Light</MudTh>
           <MudTh>Creator</MudTh>
           <MudTh>Can be verbal</MudTh>
       </HeaderContent>
       <RowTemplate>
           <MudTd DataLabel="Name">@context.Name</MudTd>
           <MudTd DataLabel="Incantation">@context.Incantation</MudTd>
           <MudTd DataLabel="Effect">@context.Effect</MudTd>
           <MudTd DataLabel="Type">@context.Type.ToString()</MudTd>
           <MudTd DataLabel="Light">@context.Light.ToString()</MudTd>
           <MudTd DataLabel="Creator">@context.Creator</MudTd>
           <MudTd DataLabel="Can be verbal">@context.CanBeVerbal</MudTd>
       </RowTemplate>
       <PagerContent>
           <MudTablePager/>
       </PagerContent>
   </MudTable> 
</MudContainer>


@code {
    private bool _dense = false;
    private bool _hover = true;
    private bool _striped = true;
    private bool _bordered = false;
    private string _searchString1 = "";
    private string _searchString2 = "";
    private Spell _selectedItem1 = null;
    private Spell _selectedItem2 = null;

    private HashSet<Spell> _selectedItems = new HashSet<Spell>();

    private IEnumerable<Spell> _spells = new List<Spell>();

    protected override async Task OnInitializedAsync() {
        _spells = await _client.GetSpellsAsync();
    }

    private bool FilterFunc1(Spell spell) => FilterFunc(spell, _searchString1);
    private bool FilterFunc2(Spell spell) => FilterFunc(spell, _searchString2);

    private bool FilterFunc(Spell spell, string searchString) {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (spell.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (spell.Incantation.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (spell.Type.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}