@using WizardWorldApp.Data
@using WizardWorldApp.Data.Spells
@using WizardWorldApp.Services
@inject WizardWorldClient _client


<MudTable Items="@_spells" Dense="false" Hover="true" Bordered="false" Striped="true"
          Filter="new Func<Spell, bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Spells</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Clearable="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Incantation</MudTh>
        <MudTh>Effect</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Light</MudTh>
        <MudTh>Creator</MudTh>
        <MudTh>Can be verbal</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Incantation">@context.Incantation</MudTd>
        <MudTd DataLabel="Effect">@context.Effect</MudTd>
        <MudTd DataLabel="Type">@context.Type.ToString()</MudTd>
        <MudTd DataLabel="Light">@context.Light.ToString()</MudTd>
        <MudTd DataLabel="Creator">@context.Creator</MudTd>
        <MudTd DataLabel="Can be verbal">@context.CanBeVerbal</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code {
    private string _searchString = "";
    private IEnumerable<Spell> _spells = new List<Spell>();

    protected override async Task OnInitializedAsync() {
        _spells = await _client.GetSpellsAsync();
    }

    private bool FilterFunc(Spell spell) => Filter(spell, _searchString);

    private bool Filter(Spell spell, string searchString) {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (spell.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (spell.Incantation != null && spell.Incantation.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (spell.Type.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    
}